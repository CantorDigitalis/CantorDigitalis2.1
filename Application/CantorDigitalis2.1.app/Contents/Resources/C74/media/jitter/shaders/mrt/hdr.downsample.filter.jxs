<jittershader name="hdr.downsample.filter.jxs">
	<param name="tex_color" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="tex_color" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[
#version 120
varying vec2 texcoord0;
uniform sampler2DRect tex_color;

vec4 DownsampleBox13Tap(sampler2DRect tex, vec2 uv, vec2 texelSize)
{
    vec4 A = texture2DRect(tex, (uv + texelSize * vec2(-1.0, -1.0)));
    vec4 B = texture2DRect(tex, (uv + texelSize * vec2( 0.0, -1.0)));
    vec4 C = texture2DRect(tex, (uv + texelSize * vec2( 1.0, -1.0)));
    vec4 D = texture2DRect(tex, (uv + texelSize * vec2(-0.5, -0.5)));
    vec4 E = texture2DRect(tex, (uv + texelSize * vec2( 0.5, -0.5)));
    vec4 F = texture2DRect(tex, (uv + texelSize * vec2(-1.0,  0.0)));
    vec4 G = texture2DRect(tex, (uv                                 ));
    vec4 H = texture2DRect(tex, (uv + texelSize * vec2( 1.0,  0.0)));
    vec4 I = texture2DRect(tex, (uv + texelSize * vec2(-0.5,  0.5)));
    vec4 J = texture2DRect(tex, (uv + texelSize * vec2( 0.5,  0.5)));
    vec4 K = texture2DRect(tex, (uv + texelSize * vec2(-1.0,  1.0)));
    vec4 L = texture2DRect(tex, (uv + texelSize * vec2( 0.0,  1.0)));
    vec4 M = texture2DRect(tex, (uv + texelSize * vec2( 1.0,  1.0)));

    vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);

    vec4 o = (D + E + I + J) * div.x;
    o += (A + B + G + F) * div.y;
    o += (B + C + H + G) * div.y;
    o += (F + G + L + K) * div.y;
    o += (G + H + M + L) * div.y;

    return o;
}

void main()
{
	vec4 color = DownsampleBox13Tap(tex_color, texcoord0, vec2(1.0));
	gl_FragColor = color;
}
]]>		
		</program>		
	</language>
</jittershader>