<jittershader name="gm.test.jxs">
	<description>Simple geometry shader test</description>
	<param name="div" type="float" default="8." />
	<param name="radius" type="float" default="0.5" />
	<param name="height" type="float" default="0.5" />
	<param name="Ia" type="vec4" default="0. 0.03 0. 1.0" />
	<param name="Ii" type="vec4" default="1. 1. 1. 1.0" />
	<param name="eyePosition" type="vec3" default="0. 0. 4."/>
	<param name="Ke" type="vec4" default="0.0 0.0 0.0 0.0" />
	<param name="Ka" type="vec4" default="1.0 1.0 1.0 1.0" />
	<param name="Kd" type="vec4" default="0.2 0.05 0.05 1.0" />
	<param name="Ks" type="vec4" default="0.0 0.05 0.1 1.0" />
	<param name="Ns" type="float" default="10." />

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="projectionMatrix" type="mat4" state="PROJECTION_MATRIX" />
	<param name="modelViewMatrix" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="normalMatrix"    type="mat3" state="NORMAL_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="normal" type="vec3" state="NORMAL" />
	<param name="LightingParameters" state="LIGHT" />

	<language name="glsl" version="1.2">
		<bind param="div" program="gp" />
		<bind param="radius" program="gp" />
		<bind param="height" program="gp" />
		<bind param="Ia" program="fp" />
		<bind param="Ii" program="fp" />
		<bind param="eyePosition" program="fp" />
		<bind param="Ka" program="fp" />
		<bind param="Kd" program="fp" />
		<bind param="Ks" program="fp" />
		<bind param="Ns" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[

#version 120

varying vec3 P;

void main(void)
{
	//get the vertices into eye space
	P = (gl_ModelViewMatrix*gl_Vertex).xyz;
	
	//just send the things as they are
	gl_Position = gl_Vertex;
	gl_FrontColor = gl_Color;
}

]]>		
		</program>
		<program name="gp" vertices_out="24" input_type="points" output_type="triangle_strip" type="geometry">
<![CDATA[

#version 120
#extension GL_EXT_geometry_shader4 : enable

uniform float div;
uniform float radius;
uniform float height;

varying in vec3 P[1];
varying out vec3 Norm;
varying out vec3 Po;

void main(void)
{
	float angle = 6.28/(div);
	vec4 point = gl_PositionIn[0];
	point.z += height;

///----------------------------------------------------------------
///-------- First Section
	vec3 currentOffset = vec3(cos(angle), sin(angle), -height);
	vec3 lastOffset = vec3(cos(0.), sin(0.), -height);
	
	
	vec4 currentPoint = vec4(currentOffset, 1.);
	currentPoint.xyz *= radius;
	currentPoint += point;
	
	vec4 lastPoint = vec4(lastOffset, 1.);
	lastPoint.xyz *= radius;
	lastPoint += point;
	
	vec3 v1 = currentPoint.xyz - point.xyz;
	vec3 v2 = lastPoint.xyz - currentPoint.xyz;
	vec3 v3 = point.xyz - lastPoint.xyz;
	
	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*vec3(0, 0, 1.);
	Po = P[0];
	gl_Position = gl_ModelViewProjectionMatrix*point;
	EmitVertex();
	
	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*normalize( cross(v2, v1) );
	Po = P[0] + currentOffset;
	gl_Position = gl_ModelViewProjectionMatrix*currentPoint;
	EmitVertex();

	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*normalize( cross(v3, v2) );
	Po = P[0] + lastOffset;
	gl_Position = gl_ModelViewProjectionMatrix*lastPoint;
	EmitVertex();
	
	EndPrimitive();

///----------------------------------------------------------------


///----------------------------------------------------------------
///-------- Intermediate Sections

	for(int i=1; i < div-1; i++)
	{
		lastOffset = currentOffset;
		currentOffset = vec3(cos(angle*float(i+1)), sin(angle*float(i+1)), -height);
		
		lastPoint = currentPoint;
		currentPoint = vec4(currentOffset, 1.);
		currentPoint.xyz *= radius;
		currentPoint += point;
		
		v1 = currentPoint.xyz - point.xyz;
		v2 = lastPoint.xyz - currentPoint.xyz;
		v3 = point.xyz - lastPoint.xyz;
		
		gl_FrontColor = gl_FrontColorIn[0];
		Norm = gl_NormalMatrix*vec3(0, 0, 1.);
		Po = P[0];
		gl_Position = gl_ModelViewProjectionMatrix*point;
		EmitVertex();
		
		gl_FrontColor = gl_FrontColorIn[0];
		Norm = gl_NormalMatrix*normalize( cross(v2, v1) );
		Po = P[0] + currentOffset;
		gl_Position = gl_ModelViewProjectionMatrix*currentPoint;
		EmitVertex();
	
		gl_FrontColor = gl_FrontColorIn[0];
		Norm = gl_NormalMatrix*normalize( cross(v3, v2) );
		Po = P[0] + lastOffset;
		gl_Position = gl_ModelViewProjectionMatrix*lastPoint;
		EmitVertex();
		
		EndPrimitive();

	}
///----------------------------------------------------------------


///----------------------------------------------------------------
///-------- Last Section
	lastOffset = vec3(cos(angle*(div-1.)), sin(angle*(div-1.)), -height);
	currentOffset = vec3(cos(0.), sin(0.), -height);

	currentPoint = vec4(currentOffset, 1.);
	currentPoint.xyz *= radius;
	currentPoint += point;
	
	lastPoint = vec4(lastOffset, 1.);
	lastPoint.xyz *= radius;
	lastPoint += point;
	
	v1 = currentPoint.xyz - point.xyz;
	v2 = lastPoint.xyz - currentPoint.xyz;
	v3 = point.xyz - lastPoint.xyz;
	
	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*vec3(0, 0, 1.);
	Po = P[0];
	gl_Position = gl_ModelViewProjectionMatrix*point;
	EmitVertex();
	
	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*normalize( cross(v2, v1) );
	Po = P[0] + currentOffset;
	gl_Position = gl_ModelViewProjectionMatrix*currentPoint;
	EmitVertex();

	gl_FrontColor = gl_FrontColorIn[0];
	Norm = gl_NormalMatrix*normalize( cross(v3, v2) );
	Po = P[0] + lastOffset;
	gl_Position = gl_ModelViewProjectionMatrix*lastPoint;
	EmitVertex();
	
	EndPrimitive();
///----------------------------------------------------------------
}


]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120

uniform vec4 Ia;
uniform vec4 Ii;
uniform vec3 eyePosition;
uniform vec4 Ke;
uniform vec4 Ka;
uniform vec4 Kd;
uniform vec4 Ks;
uniform float Ns;

varying vec3 Po;
varying vec3 Norm;

void main (void)
{
	vec3 Nn = normalize(Norm);
	
	//ambient contribution
	vec4 ambient = Ia*Ka;
	
	vec3 lightPosition = vec3(gl_LightSource[0].position);
	
	//diffuse contribution
	vec3 L = normalize(lightPosition - Po);
	vec4 diffuse = Kd*Ii*max(dot(Nn, L), 0.);
	
	//calculate specular contribution
	vec3 V = normalize(eyePosition - Po);
	vec3 H = normalize(L + V); //average of lighting and view vector)  not true reflection vector
	vec4 specular = Ks*Ii * pow(max(dot(Nn,H), 0.), Ns);
	
	gl_FragColor = Ke + ambient + diffuse + specular;
}

]]>		
		</program>		
	</language>

<language name="glsl" version="1.5">
	<bind param="div" program="gp" />
	<bind param="radius" program="gp" />
	<bind param="height" program="gp" />
	<bind param="Ia" program="fp" />
	<bind param="Ii" program="fp" />
	<bind param="eyePosition" program="fp" />
	<bind param="Ka" program="fp" />
	<bind param="Kd" program="fp" />
	<bind param="Ks" program="fp" />
	<bind param="Ns" program="fp" />

	<bind param="position" program="vp" />
	<bind param="color" program="vp" />	
	<bind param="normal" program="vp" />
	<bind param="modelViewMatrix" program="vp" />
	<bind param="modelViewProjectionMatrix" program="gp" />
	<bind param="normalMatrix" program="gp" />
	<bind param="projectionMatrix" program="gp" />
	<bind param="LightingParameters" program="fp" />

<program name="vp" type="vertex">
<![CDATA[

#version 330

uniform mat4 modelViewMatrix;

in vec3 position;
in vec4 color;

out jit_PerVertex {
	vec3 P;
	vec4 color;
} jit_out;

void main(void)
{
	//get the vertices into eye space
	jit_out.P = (modelViewMatrix*vec4(position, 1.0)).xyz;
	
	//just send the things as they are
	gl_Position = vec4(position, 1.0);
	jit_out.color = color;
}

]]>		
		</program>
		<program name="gp" vertices_out="24" input_type="points" output_type="triangle_strip" type="geometry">
<![CDATA[

#version 330
layout (points) in;
layout (triangle_strip, max_vertices=24) out;

uniform float div;
uniform float radius;
uniform float height;
uniform mat3 normalMatrix;
uniform mat4 modelViewProjectionMatrix;

in jit_PerVertex {
	vec3 P;
	vec4 color;
} jit_in[];

out jit_PerVertex {
	vec3 Norm;
	vec3 Po;
	vec4 color;
};

void main(void)
{
	float angle = 6.28/(div);
	vec4 point = gl_in[0].gl_Position;
	point.z += height;

///----------------------------------------------------------------
///-------- First Section
	vec3 currentOffset = vec3(cos(angle), sin(angle), -height);
	vec3 lastOffset = vec3(cos(0.), sin(0.), -height);
	
	
	vec4 currentPoint = vec4(currentOffset, 1.);
	currentPoint.xyz *= radius;
	currentPoint += point;
	
	vec4 lastPoint = vec4(lastOffset, 1.);
	lastPoint.xyz *= radius;
	lastPoint += point;
	
	vec3 v1 = currentPoint.xyz - point.xyz;
	vec3 v2 = lastPoint.xyz - currentPoint.xyz;
	vec3 v3 = point.xyz - lastPoint.xyz;
	
	color = jit_in[0].color;
	Norm = normalMatrix*vec3(0, 0, 1.);
	Po = jit_in[0].P;
	gl_Position = modelViewProjectionMatrix*point;
	EmitVertex();
	
	color = jit_in[0].color;
	Norm = normalMatrix*normalize( cross(v2, v1) );
	Po = jit_in[0].P + currentOffset;
	gl_Position = modelViewProjectionMatrix*currentPoint;
	EmitVertex();

	color = jit_in[0].color;
	Norm = normalMatrix*normalize( cross(v3, v2) );
	Po = jit_in[0].P + lastOffset;
	gl_Position = modelViewProjectionMatrix*lastPoint;
	EmitVertex();
	
	EndPrimitive();

///----------------------------------------------------------------


///----------------------------------------------------------------
///-------- Intermediate Sections

	for(int i=1; i < div-1; i++)
	{
		lastOffset = currentOffset;
		currentOffset = vec3(cos(angle*float(i+1)), sin(angle*float(i+1)), -height);
		
		lastPoint = currentPoint;
		currentPoint = vec4(currentOffset, 1.);
		currentPoint.xyz *= radius;
		currentPoint += point;
		
		v1 = currentPoint.xyz - point.xyz;
		v2 = lastPoint.xyz - currentPoint.xyz;
		v3 = point.xyz - lastPoint.xyz;
		
		color = jit_in[0].color;
		Norm = normalMatrix*vec3(0, 0, 1.);
		Po = jit_in[0].P;
		gl_Position = modelViewProjectionMatrix*point;
		EmitVertex();
		
		color = jit_in[0].color;
		Norm = normalMatrix*normalize( cross(v2, v1) );
		Po = jit_in[0].P + currentOffset;
		gl_Position = modelViewProjectionMatrix*currentPoint;
		EmitVertex();
	
		color = jit_in[0].color;
		Norm = normalMatrix*normalize( cross(v3, v2) );
		Po = jit_in[0].P + lastOffset;
		gl_Position = modelViewProjectionMatrix*lastPoint;
		EmitVertex();
		
		EndPrimitive();

	}
///----------------------------------------------------------------

///----------------------------------------------------------------
///-------- Last Section
	lastOffset = vec3(cos(angle*(div-1.)), sin(angle*(div-1.)), -height);
	currentOffset = vec3(cos(0.), sin(0.), -height);

	currentPoint = vec4(currentOffset, 1.);
	currentPoint.xyz *= radius;
	currentPoint += point;
	
	lastPoint = vec4(lastOffset, 1.);
	lastPoint.xyz *= radius;
	lastPoint += point;
	
	v1 = currentPoint.xyz - point.xyz;
	v2 = lastPoint.xyz - currentPoint.xyz;
	v3 = point.xyz - lastPoint.xyz;
	
	color = jit_in[0].color;
	Norm = normalMatrix*vec3(0, 0, 1.);
	Po = jit_in[0].P;
	gl_Position = modelViewProjectionMatrix*point;
	EmitVertex();
	
	color = jit_in[0].color;
	Norm = normalMatrix*normalize( cross(v2, v1) );
	Po = jit_in[0].P + currentOffset;
	gl_Position = modelViewProjectionMatrix*currentPoint;
	EmitVertex();

	color = jit_in[0].color;
	Norm = normalMatrix*normalize( cross(v3, v2) );
	Po = jit_in[0].P + lastOffset;
	gl_Position = modelViewProjectionMatrix*lastPoint;
	EmitVertex();
	
	EndPrimitive();
///----------------------------------------------------------------
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 330

uniform vec4 Ia;
uniform vec4 Ii;
uniform vec3 eyePosition;
uniform vec4 Ke;
uniform vec4 Ka;
uniform vec4 Kd;
uniform vec4 Ks;
uniform float Ns;

layout (location = 0) out vec4 color;

struct LightModelParameters {
	vec4 ambient;
};

struct LightSourceParameters {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 position;
	vec3 spotDirection;
	float spotExponent;
	float spotCutoff;
	float spotCosCutoff;
	float constantAttenuation;
	float linearAttenuation;
	float quadraticAttenuation;
};

layout (std140) uniform LightingParameters {
	LightModelParameters lightModel;
	LightSourceParameters light[1];
};

in jit_PerVertex {
	vec3 Norm;
	vec3 Po;
	vec4 color;
} jit_in;

void main (void)
{
	vec3 Nn = normalize(jit_in.Norm);
	
	//ambient contribution
	vec4 ambient = Ia*Ka;
	
	vec3 lightPosition = vec3(light[0].position.xyz);
	
	//diffuse contribution
	vec3 L = normalize(lightPosition - jit_in.Po);
	vec4 diffuse = Kd*Ii*max(dot(Nn, L), 0.);
	
	//calculate specular contribution
	vec3 V = normalize(eyePosition - jit_in.Po);
	vec3 H = normalize(L + V); //average of lighting and view vector)  not true reflection vector
	vec4 specular = Ks*Ii * pow(max(dot(Nn,H), 0.), Ns);
	
	color = Ke + ambient + diffuse + specular;
}

]]>		
		</program>		
	</language>
</jittershader>
