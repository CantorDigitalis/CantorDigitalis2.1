<jittershader name="mrt.simple.render.jxs">
	<param name="tex_color" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="tex_color" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />		
		<program name="fp" type="fragment">
<![CDATA[

varying vec2 texcoord0;

uniform sampler2DRect tex_color; 

vec3 applyFXAA(sampler2DRect tex, vec2 fragCoord)
{
    float FXAA_SPAN_MAX = 8.0;
    float FXAA_REDUCE_MUL = 1.0/8.0;
    float FXAA_REDUCE_MIN = 1.0/128.0;
    
    vec3 rgbNW = texture2DRect(tex, fragCoord + vec2(-1.0, -1.0)).rgb;
    vec3 rgbNE = texture2DRect(tex, fragCoord + vec2(1.0, -1.0)).rgb;
    vec3 rgbSW = texture2DRect(tex, fragCoord + vec2(-1.0, 1.0)).rgb;
    vec3 rgbSE = texture2DRect(tex, fragCoord + vec2(1.0, 1.0)).rgb;
    vec3 rgbM  = texture2DRect(tex, fragCoord).rgb;
    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
              dir * rcpDirMin));
      
    vec3 rgbA = 0.5 * (
        texture2DRect(tex, fragCoord + dir * (1.0 / 3.0 - 0.5)).rgb +
        texture2DRect(tex, fragCoord + dir * (2.0 / 3.0 - 0.5)).rgb);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        texture2DRect(tex, fragCoord + dir * -0.5).rgb +
        texture2DRect(tex, fragCoord + dir * 0.5).rgb);

    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
        return rgbA;
    else
        return rgbB;
}

void main()
{
	vec3 image = applyFXAA(tex_color, texcoord0);
	gl_FragColor = vec4(image, 0);
}

]]>		
		</program>		
	</language>
</jittershader>
